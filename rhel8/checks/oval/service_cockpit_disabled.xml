<def-group>

  

  <definition class="compliance" id="service_cockpit_disabled" version="1">
    <metadata>
      <title>Service cockpit Disabled</title>
      <affected family="unix">
        <platform>multi_platform_all</platform>
      </affected>
      <description>The cockpit service should be disabled if possible.</description>
    </metadata>
    <criteria comment="package cockpit removed or service cockpit is not configured to start" operator="OR">
      <criterion comment="cockpit removed" test_ref="test_service_cockpit_package_cockpit_removed" />
      <criteria operator="AND" comment="service cockpit is not configured to start">
        <criterion comment="cockpit is not running" test_ref="test_service_not_running_cockpit" />
        <criterion comment="Property LoadState of service cockpit is masked" test_ref="test_service_loadstate_is_masked_cockpit" />
        <criterion comment="Property FragmentPath of service cockpit is set to /dev/null" test_ref="test_service_fragmentpath_is_dev_null_cockpit" />
      </criteria>
    </criteria>
  </definition>

  <linux:systemdunitdependency_test check="all" check_existence="any_exist" comment="systemd test" id="test_cockpit_not_wanted_by_multi_user_target" version="1">
    <linux:object object_ref="object_multi_user_target_for_cockpit_disabled" />
    <linux:state state_ref="state_systemd_cockpit_off"/>
  </linux:systemdunitdependency_test>
  <linux:systemdunitdependency_object id="object_multi_user_target_for_cockpit_disabled" comment="list of dependencies of multi-user.target" version="1">
    <linux:unit>multi-user.target</linux:unit>
  </linux:systemdunitdependency_object>
  <linux:systemdunitdependency_state id="state_systemd_cockpit_off" comment="cockpit service is not listed in the dependencies" version="1">
    <linux:dependency entity_check="none satisfy">cockpit.service</linux:dependency>
  </linux:systemdunitdependency_state>

  <linux:systemdunitdependency_test check="all" check_existence="any_exist" comment="systemd test" id="test_cockpit_socket_not_wanted_by_multi_user_target" version="1">
    <linux:object object_ref="object_multi_user_target_for_cockpit_socket_disabled" />
    <linux:state state_ref="state_systemd_cockpit_socket_off"/>
  </linux:systemdunitdependency_test>
  <linux:systemdunitdependency_object id="object_multi_user_target_for_cockpit_socket_disabled" comment="list of dependencies of multi-user.target" version="1">
    <linux:unit>multi-user.target</linux:unit>
  </linux:systemdunitdependency_object>
  <linux:systemdunitdependency_state id="state_systemd_cockpit_socket_off" comment="cockpit socket is not listed in the dependencies" version="1">
    <linux:dependency entity_check="none satisfy">cockpit.socket</linux:dependency>
  </linux:systemdunitdependency_state>

  <linux:systemdunitproperty_test id="test_service_not_running_cockpit" check="all" check_existence="any_exist" comment="Test that the cockpit service is not running" version="1">
    <linux:object object_ref="obj_service_not_running_cockpit"/>
    <linux:state state_ref="state_service_not_running_cockpit"/>
  </linux:systemdunitproperty_test>
  <linux:systemdunitproperty_object id="obj_service_not_running_cockpit" comment="Retrieve the ActiveState property of cockpit" version="1">
    <linux:unit operation="pattern match">^cockpit\.(service|socket)$</linux:unit>
    <linux:property>ActiveState</linux:property>
  </linux:systemdunitproperty_object>
  <linux:systemdunitproperty_state id="state_service_not_running_cockpit" version="1" comment="cockpit is not running">
      <linux:value>inactive</linux:value>
  </linux:systemdunitproperty_state>
  <linux:systemdunitproperty_test id="test_service_loadstate_is_masked_cockpit" check="all" check_existence="any_exist" comment="Test that the property LoadState from the service cockpit is masked" version="1">
    <linux:object object_ref="obj_service_loadstate_is_masked_cockpit"/>
    <linux:state state_ref="state_service_loadstate_is_masked_cockpit"/>
  </linux:systemdunitproperty_test>
  <linux:systemdunitproperty_object id="obj_service_loadstate_is_masked_cockpit" comment="Retrieve the LoadState property of cockpit" version="1">
    <linux:unit operation="pattern match">^cockpit\.(service|socket)$</linux:unit>
    <linux:property>LoadState</linux:property>
  </linux:systemdunitproperty_object>
  <linux:systemdunitproperty_state id="state_service_loadstate_is_masked_cockpit" version="1" comment="LoadState is set to masked">
      <linux:value>masked</linux:value>
  </linux:systemdunitproperty_state>

  <linux:systemdunitproperty_test id="test_service_fragmentpath_is_dev_null_cockpit" check="all" check_existence="any_exist" comment="Test that the property FragmentPath from the service cockpit is set to /dev/null" version="1">
    <linux:object object_ref="obj_service_fragmentpath_is_dev_null_cockpit"/>
    <linux:state state_ref="state_service_fragmentpath_is_dev_null_cockpit"/>
  </linux:systemdunitproperty_test>
  <linux:systemdunitproperty_object id="obj_service_fragmentpath_is_dev_null_cockpit" comment="Retrieve the FragmentPath property of cockpit" version="1">
    <linux:unit operation="pattern match">^cockpit\.(service|socket)$</linux:unit>
    <linux:property>FragmentPath</linux:property>
  </linux:systemdunitproperty_object>
  <linux:systemdunitproperty_state id="state_service_fragmentpath_is_dev_null_cockpit" version="1" comment="FragmentPath is set to /dev/null">
      <linux:value>/dev/null</linux:value>
  </linux:systemdunitproperty_state>





  <linux:rpminfo_test check="all" check_existence="none_exist"
  id="test_service_cockpit_package_cockpit_removed" version="1"
  comment="package cockpit is removed">
    <linux:object object_ref="obj_test_service_cockpit_package_cockpit_removed" />
  </linux:rpminfo_test>
  <linux:rpminfo_object id="obj_test_service_cockpit_package_cockpit_removed" version="1">
    <linux:name>cockpit</linux:name>
  </linux:rpminfo_object>


</def-group>