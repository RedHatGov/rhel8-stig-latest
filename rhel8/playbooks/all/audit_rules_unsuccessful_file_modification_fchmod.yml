# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv
# reboot = true
# strategy = restrict
# complexity = low
# disruption = low
- name: Record Unsuccessul Permission Changes to Files - fchmod
  hosts: '@@HOSTS@@'
  become: true
  tags:
    - CCE-80977-2
    - NIST-800-53-AU-12(c)
    - audit_rules_unsuccessful_file_modification_fchmod
    - low_complexity
    - low_disruption
    - medium_severity
    - reboot_required
    - restrict_strategy
  tasks:

    - name: Set architecture for audit fchmod tasks
      set_fact:
        audit_arch: b{{ ansible_architecture | regex_replace('.*(\d\d$)','\1') }}
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type
        != "docker"

    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: /etc/audit/rules.d
        recurse: false
        contains: -F key=perm_mod$
        patterns: '*.rules'
      register: find_fchmod
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type
        != "docker"

    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules
        as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when:
        - find_fchmod.matched is defined and find_fchmod.matched == 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type !=
          "docker"

    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - '{{ find_fchmod.files | map(attribute=''path'') | list | first }}'
      when:
        - find_fchmod.matched is defined and find_fchmod.matched > 0
        - ansible_virtualization_role != "guest" or ansible_virtualization_type !=
          "docker"

    - name: Inserts/replaces the fchmod rule in rules.d when on x86
      lineinfile:
        path: '{{ all_files[0] }}'
        line: '{{ item }}'
        create: true
      with_items:
        - -a always,exit -F arch=b32 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=unset
          -F key=access
        - -a always,exit -F arch=b32 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=unset
          -F key=access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type
        != "docker"

    - name: Inserts/replaces the fchmod rule in rules.d when on x86_64
      lineinfile:
        path: '{{ all_files[0] }}'
        line: '{{ item }}'
        create: true
      with_items:
        - -a always,exit -F arch=b64 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=unset
          -F key=access
        - -a always,exit -F arch=b64 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=unset
          -F key=access
      when:
        - audit_arch is defined and audit_arch == 'b64'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type !=
          "docker"

    - name: Inserts/replaces the fchmod rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: '{{ item }}'
        state: present
        dest: /etc/audit/audit.rules
        create: true
      with_items:
        - -a always,exit -F arch=b32 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=unset
          -F key=access
        - -a always,exit -F arch=b32 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=unset
          -F key=access
      when: ansible_virtualization_role != "guest" or ansible_virtualization_type
        != "docker"

    - name: Inserts/replaces the fchmod rule in audit.rules when on x86_64
      lineinfile:
        line: '{{ item }}'
        state: present
        dest: /etc/audit/audit.rules
        create: true
      with_items:
        - -a always,exit -F arch=b64 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=unset
          -F key=access
        - -a always,exit -F arch=b64 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=unset
          -F key=access
      when:
        - audit_arch is defined and audit_arch == 'b64'
        - ansible_virtualization_role != "guest" or ansible_virtualization_type !=
          "docker"
